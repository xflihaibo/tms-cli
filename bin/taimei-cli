#! /usr/bin/env node
const  Printer = require('@darkobits/lolcatjs');
const package=require('../package.json');
const { Command } = require('commander');
const ora = require('ora');
const download = require('download-git-repo');
const shell = require('shelljs');
const json2ts = require("json2ts");
const chalk = require('chalk');
const asciify = require('asciify');
const yargs = require('yargs');
const chokidar = require('chokidar');

const { hideBin } = require('yargs/helpers')
const argv = yargs(hideBin(process.argv)).argv



// console.log(argv)
// chokidar.watch('.').on('all', (event, path) => {
//   console.log(event, path);
// });

const program = new Command();
  program
  .option('-v, --version', chalk.cyan('🎉 output the version number'))
  .option('-i, --init', chalk.cyan('🚄 init project! '))
  .option('-t, --json2ts', chalk.cyan('🌴 typesscript to type! '))
  .option('-r, --rollup <filename> ', chalk.cyan('📦 create rollup template! '))
  .option('-c, --chrome <filename> ', chalk.cyan('📦 create chrome plugins template! '))
  .option('-e, --electron <filename> ', chalk.cyan('📦 create electron react  template! '))
  .option('-w, --watch', chalk.cyan('🏠 watch file change！'))
  .helpOption('-h, --help', chalk.cyan('🚀 can I help you? '))
  .parse(process.argv);

const options = program.opts();

if (options.rollup){
     shell.rm('-rf', options.rollup);
    // let pwd= shell.pwd().stdout
    // shell.mkdir('-p', options.rollup);
    // shell.cd( options.rollup);
    // shell.echo(shell.pwd())
   const spinner = ora('⏰ download rollup template ....').start();
   download('direct:https://github.com/xflihaibo/rollupcli.git', options.rollup, { clone: true }, function (err) {
      if(err){
          spinner.fail('download Error!!')
      }else{
           console.log('⏰ create rollup template! ....');
           shell.sed('-i','debug-web',options.rollup,shell.pwd()+'/'+options.rollup+'/package.json');
           spinner.succeed('download Success!!')
           console.log(Printer.default.fromString(`you can`));
           console.log(`cd ${options.rollup}`);
           console.log(`yarn install or npm install `);   
      }
   })
  
}


if (options.chrome){
    shell.rm('-rf', options.chrome);
   const spinner = ora('⏰ download chrome plugin template ....').start();
   download('direct:https://github.com/xflihaibo/chrome-plugin.git', options.chrome, { clone: true }, function (err) {
      if(err){
          spinner.fail('download Error!!')
      }else{
          spinner.succeed('download Success!!')
      }
   })
}

if (options.electron){
    shell.rm('-rf', options.electron);
   const spinner = ora('⏰ create electron react template! ....').start();
   download('direct:https://github.com/xflihaibo/electron-react-template.git', options.electron, { clone: true }, function (err) {
      if(err){
          spinner.fail('download Error!!')
      }else{
          console.log('⏰ create electron react template! ....');
          spinner.succeed('download Success!!')
          console.log(Printer.default.fromString(`you can`));
          console.log(`cd ${options.electron}`);
          console.log(`npm install `);  
          console.log(`npm run start-dev `);   
      }
   })
}

if (options.version) {
    asciify('TMS CLI',{font:'slant'},(err, fonts)=>{
    const newfontds =   Printer.default.fromString(`${fonts}\n  @from taimei technology   version ${package.version}`);
    console.log(newfontds);
  })
}

if (options.init){
 console.log(`init project`);
}

if (options.watch){
  console.log(`- watch`,process.cwd());
  const watcher = chokidar.watch(process.cwd());
  watcher.on('change', (path, stats) => {
          if (stats) console.log(`File ${path} changed size to ${stats.size}`);
  }) .on('error', error => log(`Watcher error: ${error}`));
}

if(options.json2ts){
    let result = json2ts.convert(JSON.stringify({
        name:'busili',
        age:12,
        happy:['music','eats']
    }));
    console.log(result)
}


